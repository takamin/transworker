{"version":3,"sources":["index.js"],"names":["TransWorker","globalContext","Function","globalContextName","constructor","name","context","createInvoker","urlDerivedWorker","clientCtor","thisObject","notifyHandlers","transworker","prototype","wkr","worker","Worker","createWrappers","Object","keys","callbacks","queryId","onNotify","onmessage","e","data","type","apply","param","ex","console","warn","method","JSON","stringify","forEach","key","arguments","methodNames","methodName","wrapper","Array","from","length","slice","splice","postMessage","createWorker","client","_transworker","m","postNotify","create","module","exports","err"],"mappings":"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","file":"transworker.map","sourceRoot":"","sourcesContent":["/*\r\n */\r\n\"use strict\";\r\n\r\n/**\r\n * TransWorker - Inter thread method invocation helper class for the WebWorker.\r\n *\r\n * This class offers different implementations for its role on the context.\r\n *\r\n * In the main thread, It creates WebWorker instance and creates wrapper\r\n * functions for all the methods declared in the prototypes of the class given\r\n * in the parameters.\r\n *\r\n * The wrapper method sends a message to the worker with the method name and\r\n * all the parameter.\r\n *\r\n * When the worker side instance received the message, it invokes the method\r\n * specified by the name in the message with the parameters.\r\n * The return value will be notified by the message to the main thread\r\n * instance from the worker.\r\n *\r\n * The main thread instance that received the notification notifies the value\r\n * to the callback function given at first invocation.\r\n *\r\n * LICENSE\r\n *\r\n * Released under the MIT license\r\n * http://opensource.org/licenses/mit-license.php\r\n *\r\n * Copyright (c) 2017 Koji Takami(vzg03566@gmail.com)\r\n *\r\n * @constructor\r\n */\r\nfunction TransWorker(){}\r\n\r\nconst globalContext = (Function(\"return this;\")());\r\nlet globalContextName = globalContext.constructor.name;\r\nif(!globalContextName) {\r\n    // Browser is NOT webkit, perhaps IE11\r\n    if(globalContext == \"[object Window]\") {\r\n        globalContextName = \"Window\";\r\n    } else if(globalContext == \"[object WorkerGlobalScope]\") {\r\n        globalContextName = \"DedicatedWorkerGlobalScope\";\r\n    }\r\n}\r\n\r\nTransWorker.context = globalContextName;\r\n\r\n/**\r\n * Create for UI-thread\r\n *\r\n * @param {string} urlDerivedWorker url to Worker process.\r\n *      It must be a sub-class of worker-side TransWorker.\r\n * @param {Function} clientCtor client-class constructor.\r\n * @param {object} thisObject this object for callback function.\r\n * @param {object} notifyHandlers notify handlers hash:\r\n *      key: name of notify, value: function object\r\n * @returns {Transworker} The created Transworker instance.\r\n */\r\nTransWorker.createInvoker = function(\r\n        urlDerivedWorker, clientCtor,\r\n        thisObject, notifyHandlers)\r\n{\r\n    const transworker = new TransWorker();\r\n    transworker.createInvoker(\r\n        urlDerivedWorker, clientCtor,\r\n        thisObject, notifyHandlers);\r\n    return transworker;\r\n};\r\n\r\n/**\r\n * Create for UI-thread\r\n *\r\n * @param {string} urlDerivedWorker url to Worker process.\r\n *      It must be a sub-class of worker-side TransWorker.\r\n * @param {Function} clientCtor client-class constructor.\r\n * @param {object} thisObject this object for callback function.\r\n * @param {object} notifyHandlers notify handlers hash:\r\n *      key: name of notify, value: function object\r\n * @returns {undefined}\r\n */\r\nTransWorker.prototype.createInvoker = function(\r\n        urlDerivedWorker, clientCtor,\r\n        thisObject, notifyHandlers)\r\n{\r\n    // Load dedicated worker\r\n    this.worker = new Worker(urlDerivedWorker);\r\n\r\n    // Create prototype entries same to the client\r\n    this.createWrappers(Object.keys(clientCtor.prototype));\r\n\r\n    // Receive message from worker thread\r\n    this.callbacks = {};\r\n    this.queryId = 0;\r\n    this.onNotify = {};\r\n    this.worker.onmessage = (function(wkr) {\r\n        return function(e) {\r\n            switch(e.data.type) {\r\n            case 'response':\r\n                try {\r\n                    wkr.callbacks[e.data.queryId].apply(\r\n                            thisObject, e.data.param);\r\n                } catch(ex) {\r\n                    console.warn(\"*** exception: \", ex,\r\n                        \"in method\", e.data.method, \"params:\",\r\n                        JSON.stringify(e.data.param));\r\n                }\r\n                delete wkr.callbacks[e.data.queryId];\r\n                break;\r\n            case 'notify':\r\n                try {\r\n                    wkr.onNotify[e.data.name](\r\n                            e.data.param);\r\n                } catch(ex) {\r\n                    console.warn(\"*** exception: \", ex,\r\n                        \"in notify\", e.data.name, \"params:\",\r\n                        JSON.stringify(e.data.param));\r\n                }\r\n                break;\r\n            }\r\n        };\r\n    }(this));\r\n\r\n    // Entry the handlers to receive notifies\r\n    notifyHandlers = notifyHandlers || {};\r\n    Object.keys(notifyHandlers).forEach(function (key) {\r\n        this.onNotify[key] = function() {\r\n            notifyHandlers[key].apply(\r\n                    thisObject, arguments);\r\n        };\r\n    }, this);\r\n\r\n};\r\n\r\n/**\r\n * Create wrapper methods to send message to the worker\r\n * @param {Array<string>} methodNames An array of method names to override.\r\n * @returns {undefined}\r\n */\r\nTransWorker.prototype.createWrappers = function(\r\n        methodNames)\r\n{\r\n    for(const methodName of methodNames) {\r\n        TransWorker.prototype[methodName] = this.wrapper(methodName);\r\n    }\r\n};\r\n\r\n/**\r\n * Create client method wrapper\r\n * @param {string} methodName A method name to override.\r\n * @returns {Function} A wrapper function.\r\n */\r\nTransWorker.prototype.wrapper = function(\r\n        methodName)\r\n{\r\n    return function() {\r\n        const queryId = this.queryId++;\r\n        let param = Array.from(arguments);\r\n        if(param.length > 0 && typeof(param.slice(-1)[0]) === \"function\") {\r\n            this.callbacks[queryId] = param.splice(-1, 1)[0];\r\n        } else {\r\n            this.callbacks[queryId] = (()=>{});\r\n        }\r\n        this.worker.postMessage({\r\n            method: methodName,\r\n            param: param,\r\n            queryId: queryId\r\n        });\r\n    };\r\n};\r\n\r\n/**\r\n * Create Worker side TransWorker instance.\r\n * (designed to be invoked from sub-class constructor)\r\n *\r\n * @param {object} client An instance of the client class.\r\n * @returns {TransWorker} an instance of TransWorker.\r\n */\r\nTransWorker.createWorker = function(client) {\r\n    const transworker = new TransWorker();\r\n    if(typeof(client) == 'function') {\r\n        client = new client();\r\n    }\r\n    transworker.createWorker(client);\r\n    return transworker;\r\n};\r\n\r\n/**\r\n * Create Worker side TransWorker instance.\r\n * (designed to be invoked from sub-class constructor)\r\n *\r\n * @param {object} client A instance of the client class.\r\n * @returns {undefined}\r\n */\r\nTransWorker.prototype.createWorker = function(client) {\r\n    this.worker = globalContext;\r\n    this.client = client;\r\n\r\n    // Make the client to be able to use this module\r\n    this.client._transworker = this;\r\n\r\n    (function(wkr) {\r\n\r\n        // Override subclas methods by this context\r\n        Object.keys(wkr.constructor.prototype)\r\n        .forEach(function(m) {\r\n            wkr.client[m] = function() {\r\n                wkr.constructor.prototype[m].apply(\r\n                    wkr, arguments);\r\n            };\r\n        });\r\n\r\n        // On receive a message, invoke the client\r\n        // method and post back its value.\r\n        wkr.worker.onmessage = function(e) {\r\n            try {\r\n                //return the value to UI-thread\r\n                wkr.worker.postMessage({\r\n                    type:'response',\r\n                    queryId: e.data.queryId,\r\n                    method: e.data.method,\r\n                    param: [\r\n                        wkr.client[e.data.method]\r\n                        .apply(\r\n                            wkr.client,\r\n                            e.data.param)\r\n                    ]\r\n                });\r\n            } catch(ex) {\r\n                console.warn(\"*** exception: \", ex,\r\n                    \"in method\", e.data.method, \"params:\",\r\n                    JSON.stringify(e.data.param));\r\n            }\r\n        };\r\n    }(this));\r\n};\r\n\r\n// Notify to the UI-thread version TransWorker instance\r\n// from derived class instance.\r\nTransWorker.prototype.postNotify = function(\r\n        name, param)\r\n{\r\n    this.worker.postMessage({\r\n        type:'notify',\r\n        name: name,\r\n        param: param\r\n    });\r\n};\r\n\r\n// Exports\r\nif(TransWorker.context == 'Window') {\r\n\r\n    TransWorker.create = TransWorker.createInvoker;\r\n    TransWorker.prototype.create = TransWorker.prototype.createInvoker;\r\n}\r\nelse if( TransWorker.context == 'DedicatedWorkerGlobalScope'\r\n        || TransWorker.context == 'WorkerGlobalScope')\r\n{\r\n    TransWorker.create = TransWorker.createWorker;\r\n    TransWorker.prototype.create = TransWorker.prototype.createWorker;\r\n}\r\n\r\nglobalContext.TransWorker = TransWorker;\r\ntry {\r\n    module.exports = TransWorker;\r\n} catch(err) {\r\n    // none\r\n}\r\n"]}